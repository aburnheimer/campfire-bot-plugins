class Boop < CampfireBot::Plugin
  
  # Markov chain implementation courtesy of http://rubyquiz.com/quiz74.html
  
  on_message /.*/,                :build_chains
  on_command 'speak',             :random_chatter
  on_command 'prime_chains',      :load_transcripts
  
  on_command 'test',              :debug
  
  def initialize
    @words = Hash.new
  end
  
  def debug(msg)
    p @words
  end
  
  def build_chains(msg)
    add_line(msg[:message])
  end
  
  def random_chatter(msg)
    puts "random_chatter"
    speak(get_sentences)
  end
  
  def focused_chatter(msg)
    
  end
  
  # TODO strip tags, ignore images.
  
  def load_transcripts(msg)
    speak("Filling my brain with transcripts...")
    bot.room.available_transcripts.each do |date|
      transcript = bot.room.transcript(date)
      transcript.each do |message|
        filtered_text = strip_messages(message)
        add_line(filtered_text.gsub(/([^\.])$/, '\1.')) unless filtered_text.blank?
        puts filtered_text.gsub(/([^\.])$/, '\1.') unless filtered_text.blank?
      end
    end
    speak("Primed!")
  end
  
  protected
  
  # Building the chains
  
  def add_line(text)
    wordlist = text.split
    wordlist.each_with_index do |word, index|
      add_word(word, wordlist[index + 1]) if index <= wordlist.size - 2
    end
  end
  
  def add_word(word, next_word)
    @words[word] = Hash.new(0) if !@words[word]
    @words[word][next_word] += 1
  end
  
  # Fetching from the chains
  
  def random_word
    @words.keys.rand
  end
  
  def get_word(word)
    return "" if !@words[word]
    followers = @words[word]
    sum = followers.inject(0) {|sum,kv| sum += kv[1]}
    random = rand(sum)+1
    partial_sum = 0
    next_word = followers.find do |word, count|
      partial_sum += count
      partial_sum >= random
    end.first
    next_word
  end
  
  # Composing sentences
  
  def get_sentences(count = 1, start_word = nil)
    puts "get_sentences"
    
    word      = start_word || random_word
    
    puts "starting word is #{word}"
    
    sentences = ''
    until sentences.count('.') == count
      sentences << word << ' '
      word = get_word(word)
    end
    sentences
  end
  
  # Utility
  
  def strip_messages(msg)
    str = msg[:message].to_s
    
    return '' if str.blank?
    
    # return nothing if the line is a bot command
    return '' if str[0..0] == '!' || str =~ Regexp.new("^#{bot.config['nickname']},", Regexp::IGNORECASE)
    
    # and get rid of the messages that are generated by the campfire system itself
    return '' if str =~ /has (entered|left) the room/
    return '' if str =~ /^View paste/
    
    # also get rid of the stuff spoken by the bot
    return '' if msg[:person] == bot.config['nickname']
    
    # now strip out all image tags completely
    str.gsub!(/<img\s.*?\/>/, '')
    
    # and now strip out all other html tags, leaving their contents intact
    str.gsub(/<\/?[^>]*>/, "")
  end
  
end